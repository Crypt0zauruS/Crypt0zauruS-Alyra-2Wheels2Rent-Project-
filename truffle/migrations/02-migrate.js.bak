const VaultW2R = require("../../2wheels2rent/contracts/VaultW2R.json");
const W2R = require("../../2wheels2rent/contracts/W2R.json");
// address on Mumbai
const vaultAddress = VaultW2R.networks[80001].address;
const W2RAddress = W2R.networks[80001].address;

const TwoWheels2RentLender = artifacts.require("TwoWheels2RentLender");
const TwoWheels2RentRenter = artifacts.require("TwoWheels2RentRenter");
const LenderWhitelist = artifacts.require("LenderWhitelist");
const RenterWhitelist = artifacts.require("RenterWhitelist");
const lenderIPFS =
  "bafybeif7bo3qj2ltdqiooyiqzl4wzxzqf5saxyfdoc6n3k7pnkydmm3kd4";
const renterIPFS =
  "bafybeihc4a3whkac7bg3eyaagki3j3emhshtzjymtieltp33ybkmkxqzfq";

module.exports = async (deployer) => {
  try {
    console.log("vaultAddress: ", vaultAddress);
    console.log("W2RAddress: ", W2RAddress);
    // Deploy TwoWheels2RentLender NFT contract
    await deployer.deploy(TwoWheels2RentLender);
    const TwoWheels2RentLenderInstance = await TwoWheels2RentLender.deployed();
    console.log(
      "TwoWheels2RentLender address: ",
      TwoWheels2RentLenderInstance.address
    );

    // Deploy TwoWheels2RentRenter NFT contract
    await deployer.deploy(TwoWheels2RentRenter);
    const TwoWheels2RentRenterInstance = await TwoWheels2RentRenter.deployed();
    console.log(
      "TwoWheels2RentRenter address: ",
      TwoWheels2RentRenterInstance.address
    );

    // Deploy LenderWhitelist contract
    await deployer.deploy(
      LenderWhitelist,
      TwoWheels2RentLenderInstance.address,
      W2RAddress,
      //W2RInstance.address,
      TwoWheels2RentRenterInstance.address,
      vaultAddress
      //VaultW2RInstance.address
    );

    // Deploy RenterWhitelist contract
    await deployer.deploy(
      RenterWhitelist,
      TwoWheels2RentRenterInstance.address,
      //W2RInstance.address,
      W2RAddress,
      TwoWheels2RentLenderInstance.address,
      vaultAddress
      //VaultW2RInstance.address
    );
    const LenderWhitelistInstance = await LenderWhitelist.deployed();
    console.log("LenderWhitelist address: ", LenderWhitelistInstance.address);
    const RenterWhitelistInstance = await RenterWhitelist.deployed();
    console.log("RenterWhitelist address: ", RenterWhitelistInstance.address);

    // Set addresses of each other in contracts
    await LenderWhitelistInstance.setRenterWhitelistAddress(
      RenterWhitelistInstance.address
    );
    console.log("RenterWhitelist address set in LenderWhitelist contract");
    await RenterWhitelistInstance.setLenderWhitelistAddress(
      LenderWhitelistInstance.address
    );
    console.log("LenderWhitelist address set in RenterWhitelist contract");

    // Set whitelist contract addresses  in NFT contracts
    await TwoWheels2RentLenderInstance.setLenderWhitelistContract(
      LenderWhitelistInstance.address
    );
    console.log(
      "LenderWhitelist address set in TwoWheels2RentLender NFT contract"
    );

    // Set IPFS hash in NFT contracts
    await TwoWheels2RentLenderInstance.setIpfsHash(lenderIPFS);
    console.log("IPFS hash set in TwoWheels2RentLender NFT contract");
    await TwoWheels2RentRenterInstance.setRenterWhitelistContract(
      RenterWhitelistInstance.address
    );
    console.log(
      "RenterWhitelist address set in TwoWheels2RentRenter NFT contract"
    );
    await TwoWheels2RentRenterInstance.setIpfsHash(renterIPFS);
    console.log("IPFS hash set in TwoWheels2RentRenter NFT contract");

    // set whitelist contracts addresses in VaultW2R as approvers
    //await VaultW2RInstance.setWhitelistLenders(LenderWhitelistInstance.address);
    //console.log("LenderWhitelist address set in VaultW2R contract");
    //await VaultW2RInstance.setWhitelistRenters(RenterWhitelistInstance.address);
    //console.log("RenterWhitelist address set in VaultW2R contract");
  } catch (error) {
    console.log(error);
  }
};
// todo:
// deploy staking contract
// add staking contract to approved contracts in VaultW2R
